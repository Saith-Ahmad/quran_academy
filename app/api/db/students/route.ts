

// app/api/db/students/route.ts
import { connectToDB } from "@/lib/db/db";
import Student from "@/models/student.model";
import { NextResponse } from "next/server";
import mongoose from "mongoose";
import inquireModel from "@/models/inquire.model";
import { generatePassword, generateStudentEducationMail, generateStudentUserId } from "@/lib/utils/studentUtils";





// ‚úÖ GET students (all or filtered by parentInquiry)
export async function GET(request: Request) {
  try {
    await connectToDB();

    // extract query param
    const { searchParams } = new URL(request.url);
    const inquireId = searchParams.get("inquire");

    let query = {};
    if (inquireId) {
      query = { parentInquiry: inquireId }; // filter by parentInquiry
    }

    const students = await Student.find(query)
      .populate("course", "title")
      .sort({ createdAt: -1 });

    return NextResponse.json(students, { status: 200 });
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}



// DELETE all students
export async function DELETE() {
  try {
    await connectToDB();
    const students = await Student.deleteMany({});
    return NextResponse.json({ success: true, message: "All students deleted" });
  } catch (error) {
    console.error("Error deleting students:", error);
    return NextResponse.json({ success: false, error: "Failed to delete students" }, { status: 500 });
  }
}





// export async function POST(req: Request) {
//   try {
//     await connectToDB();
//     const body = await req.json();

//     // üü¢ Case 1: Bulk insert
//     if (body.students && Array.isArray(body.students)) {
//       const { parentInquiry, students } = body;

//       if (!parentInquiry || students.length === 0) {
//         return NextResponse.json(
//           { error: "parentInquiry and students[] are required" },
//           { status: 400 }
//         );
//       }

//       const autoGenerated = await generateSequentialIdsAndMails(students);

//       const docs = students.map((s: any, idx: number) => ({
//         parentInquiry,
//         name: s.name,
//         email: s.email,
//         phone: s.phone,
//         gender: s.gender,
//         dateOfBirth: s.dateOfBirth ? new Date(s.dateOfBirth) : null,
//         timezone: s.timezone,
//         preferredStartDate: s.preferredStartDate || null,
//         preferredStartTime: s.preferredStartTime,
//         classDays: s.classDays,
//         course: s.course || null,
//         price: Number(s.price),
//         status: "trial",
//         trialClasses: { assigned: 3, completed: 0 },
//         feeStatus: { paid: false },
//         // auto fields
//         userId: autoGenerated[idx].userId,
//         educationMail: autoGenerated[idx].educationMail,
//         password: autoGenerated[idx].password,
//       }));


//       const created = await Student.insertMany(docs);
//       return NextResponse.json(created, { status: 201 });
//     }

//     // üü¢ Case 2: Single student
//     const {
//       name,
//       email,
//       phone,
//       gender,
//       dateOfBirth,
//       timezone,
//       preferredStartDate,
//       preferredStartTime,
//       classDays,
//       course,
//       price,
//       parentInquiry,
//       password: incomingPassword,
//     } = body;


//     if (!name || !email || !phone || !gender || !timezone || !price || !dateOfBirth) {
//       return NextResponse.json({ error: "Required fields are missing" }, { status: 400 });
//     }

//     const userId = await generateUserId();
//     const educationMail = generateEducationMailFromUserId(userId); // ‚úÖ
//     const password = incomingPassword || generatePassword(name);

//     const student = new Student({
//       parentInquiry: new mongoose.Types.ObjectId(parentInquiry), // ‚úÖ fix ObjectId
//       name,
//       email,
//       phone,
//       gender,
//       dateOfBirth: new Date(dateOfBirth), // ‚úÖ fix Date
//       timezone,
//       preferredStartDate: preferredStartDate || null,
//       preferredStartTime,
//       classDays,
//       course,
//       price,
//       status: "trial",
//       trialClasses: { assigned: 3, completed: 0 },
//       feeStatus: { paid: false },
//       // auto fields
//       userId,
//       educationMail,
//       password,
//     });

//     await student.save();
//     return NextResponse.json(student, { status: 201 });
//   } catch (error: any) {
//     console.error("‚ùå Error in POST /api/db/students:", error);
//     return NextResponse.json({ error: error.message }, { status: 500 });
//   }
// }














export async function POST(req: Request) {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    await connectToDB();
    const body = await req.json();

    // üü¢ Case 1: Bulk insert
    if (body.students && Array.isArray(body.students)) {
      const { parentInquiry, students } = body;

      if (!parentInquiry || students.length === 0) {
        return NextResponse.json(
          { error: "parentInquiry and students[] are required" },
          { status: 400 }
        );
      }

      // ‚úÖ 1. Check duplicates inside incoming array
      const emails = students.map((s:any) => s.email.toLowerCase());
      const duplicates = emails.filter(
        (email:any, idx:any) => emails.indexOf(email) !== idx
      );
      if (duplicates.length > 0) {
        return NextResponse.json(
          {
            error: `Duplicate emails found in request: ${[
              ...new Set(duplicates),
            ].join(", ")}`,
          },
          { status: 400 }
        );
      }

      // ‚úÖ 2. Check if any emails already exist in DB
      const existing = await Student.find({ email: { $in: emails } }).select(
        "email"
      );
      if (existing.length > 0) {
        const existingEmails = existing.map((e) => e.email);
        return NextResponse.json(
          {
            error: `These emails already exist: ${existingEmails.join(", ")}`,
          },
          { status: 400 }
        );
      }

      // ‚úÖ 3. Build docs
      const docs = [];
      for (const s of students) {
        const userId = await generateStudentUserId(session);
        const educationMail = generateStudentEducationMail(userId);
        const password = s.password || generatePassword(s.name);

        docs.push({
          parentInquiry: new mongoose.Types.ObjectId(parentInquiry),
          name: s.name,
          email: s.email.toLowerCase(),
          phone: s.phone,
          gender: s.gender,
          dateOfBirth: s.dateOfBirth ? new Date(s.dateOfBirth) : null,
          timezone: s.timezone,
          preferredStartDate: s.preferredStartDate || null,
          preferredStartTime: s.preferredStartTime,
          classDays: s.classDays,
          course: s.course || null,
          price: Number(s.price),
          status: "trial",
          trialClasses: { assigned: 3, completed: 0 },
          feeStatus: { paid: false },
          // auto fields
          userId,
          educationMail,
          password,
        });
      }

      const created = await Student.insertMany(docs, { session });
      await session.commitTransaction();
      session.endSession();

      return NextResponse.json(created, { status: 201 });
    }

    // üü¢ Case 2: Single student
    const {
      name,
      email,
      phone,
      gender,
      dateOfBirth,
      timezone,
      preferredStartDate,
      preferredStartTime,
      classDays,
      course,
      price,
      parentInquiry,
      password: incomingPassword,
    } = body;

    if (
      !name ||
      !email ||
      !phone ||
      !gender ||
      !timezone ||
      !price ||
      !dateOfBirth
    ) {
      return NextResponse.json(
        { error: "Required fields are missing" },
        { status: 400 }
      );
    }

    // ‚úÖ Check if email already exists
    const existingStudent = await Student.findOne({ email: email.toLowerCase() });
    if (existingStudent) {
      return NextResponse.json(
        { error: `Email already exists: ${email}` },
        { status: 400 }
      );
    }

    const userId = await generateStudentUserId(session);
    const educationMail = generateStudentEducationMail(userId);
    const password = incomingPassword || generatePassword(name);

    const student = new Student({
      parentInquiry: new mongoose.Types.ObjectId(parentInquiry),
      name,
      email: email.toLowerCase(),
      phone,
      gender,
      dateOfBirth: new Date(dateOfBirth),
      timezone,
      preferredStartDate: preferredStartDate || null,
      preferredStartTime,
      classDays,
      course,
      price,
      status: "trial",
      trialClasses: { assigned: 3, completed: 0 },
      feeStatus: { paid: false },
      // auto fields
      userId,
      educationMail,
      password,
    });

    await student.save({ session });
    await session.commitTransaction();
    session.endSession();

    return NextResponse.json(student, { status: 201 });
  } catch (error: any) {
    await session.abortTransaction();
    session.endSession();

    console.error("‚ùå Error in POST /api/db/students:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
